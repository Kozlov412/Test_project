import os
import asyncio
import logging
import time
from django.conf import settings
from django.urls import reverse
import telegram
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥
PENDING_ORDERS = {}

async def send_telegram_notification(chat_id, message):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    token = settings.TELEGRAM_BOT_TOKEN
    
    try:
        bot = telegram.Bot(token=token)
        await bot.send_message(
            chat_id=chat_id, 
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä URL
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            bot = telegram.Bot(token=token)
            await bot.send_message(
                chat_id=chat_id, 
                text=message.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', ''),
                disable_web_page_preview=False
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True
        except Exception as e2:
            logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e2}")
            return False

def send_message(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    """
    try:
        chat_id = settings.TELEGRAM_ADMIN_CHAT_ID
        return asyncio.run(send_telegram_notification(chat_id, message))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def get_admin_url(instance):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É –≤ –∞–¥–º–∏–Ω–∫–µ
    """
    admin_path = reverse('admin:core_order_change', args=[instance.id])
    return f"{settings.SITE_URL}{admin_path}"

def clean_client_name(name):
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ó–∞–∫–∞–∑ XX - " –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if " - " in name:
        parts = name.split(" - ", 1)
        if parts[0].startswith("–ó–∞–∫–∞–∑"):
            name = parts[1]
    
    # –£–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –≤ —Å–∫–æ–±–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä "(not_approved)"
    if "(" in name and ")" in name:
        name = name.split("(")[0].strip()
    
    return name

def format_order_message(instance, with_services=True):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    client_name_raw = str(instance)
    client_name = clean_client_name(client_name_raw)  # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
    phone = getattr(instance, 'phone', '')
    comment = getattr(instance, 'comment', '')
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∞–¥–º–∏–Ω–∫–∏
    admin_url = get_admin_url(instance)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"""
üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{instance.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> <i>{client_name}</i>

üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:{phone}">{phone}</a>

üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{comment or '‚Äî'}</i>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ –æ–Ω–∏ –µ—Å—Ç—å
    if with_services and hasattr(instance, 'services') and instance.services.exists():
        services_list = []
        total_price = 0
        
        for service in instance.services.all():
            service_name = getattr(service, 'name', str(service))
            service_price = getattr(service, 'price', 0)
            services_list.append(f"‚Ä¢ <i>{service_name}</i> ‚Äî <b>{service_price}</b> ‚ÇΩ")
            total_price += service_price
        
        services_text = "\n".join(services_list)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
        message += f"""
‚úÇÔ∏è <b>–í–´–ë–†–ê–ù–ù–´–ï –£–°–õ–£–ì–ò:</b>
{services_text}

üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <b>{total_price}</b> ‚ÇΩ
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    created_at = getattr(instance, 'created_at', None)
    if created_at and hasattr(created_at, 'strftime'):
        message += f"\nüóì <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <i>{created_at.strftime('%d.%m.%Y %H:%M')}</i>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∫—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    message += f"""

üîó <a href="{admin_url}">–û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</a>

<i>Steel Beard Management System</i> üßî‚úÇÔ∏è
"""
    
    return message

def process_order(instance, is_created=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ —Ä–µ—à–∞–µ—Ç, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    :param instance: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
    :param is_created: True, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞
    """
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ
    if is_created:
        PENDING_ORDERS[instance.id] = {
            'instance': instance,
            'timestamp': time.time(),
            'has_services': False
        }
        # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥–∏
        # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª–∏ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ª—É–≥–∏
        return
    
    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ª—É–≥–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–µ
    if instance.id in PENDING_ORDERS:
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —É—Å–ª—É–≥–∏
        if time.time() - PENDING_ORDERS[instance.id]['timestamp'] < 5:
            PENDING_ORDERS[instance.id]['has_services'] = True
            return
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        order_data = PENDING_ORDERS.pop(instance.id)
        message = format_order_message(instance, True)
        send_message(message)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏ –Ω–µ –æ–∂–∏–¥–∞—é—â–∞—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ª—É–≥–∞–º–∏
    message = format_order_message(instance, True)
    send_message(message)

def check_pending_orders():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–µ–º, 
    —á—Ç–æ –∂–¥—É—Ç –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
    """
    current_time = time.time()
    to_remove = []
    
    for order_id, data in PENDING_ORDERS.items():
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
        if current_time - data['timestamp'] > 5:
            instance = data['instance']
            with_services = data['has_services']
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = format_order_message(instance, with_services)
            send_message(message)
            # –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            to_remove.append(order_id)
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    for order_id in to_remove:
        PENDING_ORDERS.pop(order_id, None)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
def start_checking_pending_orders():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
    """
    import threading
    
    def check_loop():
        while True:
            try:
                check_pending_orders()
                time.sleep(5)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    checker_thread = threading.Thread(target=check_loop, daemon=True)
    checker_thread.start()
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
start_checking_pending_orders()